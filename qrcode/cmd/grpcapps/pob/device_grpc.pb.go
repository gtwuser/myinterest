// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pob

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ManageDeviceClient is the client API for ManageDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageDeviceClient interface {
	ManagedDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
}

type manageDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageDeviceClient(cc grpc.ClientConnInterface) ManageDeviceClient {
	return &manageDeviceClient{cc}
}

func (c *manageDeviceClient) ManagedDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, "/device.ManageDevice/ManagedDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageDeviceServer is the server API for ManageDevice service.
// All implementations must embed UnimplementedManageDeviceServer
// for forward compatibility
type ManageDeviceServer interface {
	ManagedDevice(context.Context, *DeviceRequest) (*DeviceResponse, error)
	mustEmbedUnimplementedManageDeviceServer()
}

// UnimplementedManageDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedManageDeviceServer struct {
}

func (UnimplementedManageDeviceServer) ManagedDevice(context.Context, *DeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagedDevice not implemented")
}
func (UnimplementedManageDeviceServer) mustEmbedUnimplementedManageDeviceServer() {}

// UnsafeManageDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageDeviceServer will
// result in compilation errors.
type UnsafeManageDeviceServer interface {
	mustEmbedUnimplementedManageDeviceServer()
}

func RegisterManageDeviceServer(s grpc.ServiceRegistrar, srv ManageDeviceServer) {
	s.RegisterService(&_ManageDevice_serviceDesc, srv)
}

func _ManageDevice_ManagedDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageDeviceServer).ManagedDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.ManageDevice/ManagedDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageDeviceServer).ManagedDevice(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManageDevice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "device.ManageDevice",
	HandlerType: (*ManageDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ManagedDevice",
			Handler:    _ManageDevice_ManagedDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}
